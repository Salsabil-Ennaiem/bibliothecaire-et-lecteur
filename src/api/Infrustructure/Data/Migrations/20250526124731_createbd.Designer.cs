// <auto-generated />
using System;
using System.Collections.Generic;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(BiblioDbContext))]
    [Migration("20250526124731_createbd")]
    partial class createbd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Bibliothecaire", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Bibliothecaires", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Emprunts", b =>
                {
                    b.Property<string>("id_emp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("id_emp");

                    b.Property<string>("Id_inv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Statut_emp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("en_cours");

                    b.Property<DateTime?>("date_effectif")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date_emp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 5, 26, 12, 47, 30, 213, DateTimeKind.Utc).AddTicks(8473));

                    b.Property<DateTime?>("date_retour_prevu")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("id_biblio")
                        .HasColumnType("text");

                    b.Property<string>("id_membre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .HasColumnType("text");

                    b.HasKey("id_emp");

                    b.HasIndex("Id_inv");

                    b.HasIndex("id_biblio");

                    b.ToTable("Emprunts", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Inventaire", b =>
                {
                    b.Property<string>("id_inv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("cote_liv")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("etat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("moyen");

                    b.Property<string>("id_liv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("inventaire")
                        .HasColumnType("text");

                    b.Property<string>("statut")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("disponible");

                    b.HasKey("id_inv");

                    b.HasIndex("id_liv");

                    b.ToTable("Inventaire", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Livres", b =>
                {
                    b.Property<string>("id_livre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Langue")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("auteur")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("couverture")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("date_edition")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("editeur")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("id_biblio")
                        .HasColumnType("text");

                    b.Property<string>("isbn")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<string>("titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("id_livre");

                    b.HasIndex("id_biblio");

                    b.HasIndex("isbn")
                        .IsUnique();

                    b.ToTable("Livres", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Membre", b =>
                {
                    b.Property<string>("id_membre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("actif");

                    b.Property<string>("TypeMembre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("cin_ou_passeport")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("date_inscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("id_biblio")
                        .HasColumnType("text");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("telephone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("id_membre");

                    b.HasIndex("cin_ou_passeport")
                        .IsUnique();

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("id_biblio");

                    b.ToTable("Membre", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Nouveaute", b =>
                {
                    b.Property<string>("id_nouv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("couverture")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasDefaultValue("https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Favf.asso.fr%2Famboise%2Fwp-content%2Fuploads%2Fsites%2F171%2F2021%2F03%2FLogo-Nouveau.jpg&f=1&nofb=1&ipt=fdbaaa07e45eb9aa0e1f8802a963c3259485319662623816e07adf250d84f1f9");

                    b.Property<DateTime>("date_publication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("fichier")
                        .HasColumnType("jsonb");

                    b.Property<string>("id_biblio")
                        .HasColumnType("text");

                    b.Property<string>("titre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("id_nouv");

                    b.HasIndex("id_biblio");

                    b.ToTable("Nouveaute", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Parametre", b =>
                {
                    b.Property<string>("id_param")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("Delais_Emprunt_Autre")
                        .HasColumnType("integer");

                    b.Property<int>("Delais_Emprunt_Enseignant")
                        .HasColumnType("integer");

                    b.Property<int>("Delais_Emprunt_Etudiant")
                        .HasColumnType("integer");

                    b.Property<string>("IdBiblio")
                        .HasColumnType("text");

                    b.Property<string>("Modele_Email_Retard")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("date_modification")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id_param");

                    b.HasIndex("IdBiblio");

                    b.ToTable("Parametres", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Sanction", b =>
                {
                    b.Property<string>("id_sanc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("date_fin_sanction")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("date_sanction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("id_biblio")
                        .HasColumnType("text");

                    b.Property<string>("id_emp")
                        .HasColumnType("text");

                    b.Property<string>("id_membre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("montant")
                        .HasColumnType("decimal(100,3)");

                    b.Property<bool?>("payement")
                        .HasColumnType("boolean");

                    b.Property<string>("raison")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_sanc");

                    b.HasIndex("id_biblio");

                    b.HasIndex("id_emp");

                    b.HasIndex("id_membre");

                    b.ToTable("Sanction", (string)null);
                });

            modelBuilder.Entity("domain.Entity.Statistique", b =>
                {
                    b.Property<string>("id_stat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<double>("Emprunt_Par_Membre")
                        .HasColumnType("double precision");

                    b.Property<int>("Nombre_Sanction_Emises")
                        .HasColumnType("integer");

                    b.Property<int>("Période_en_jour")
                        .HasColumnType("integer");

                    b.Property<decimal>("Somme_Amende_Collectées")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Taux_Emprunt_En_Perte")
                        .HasColumnType("double precision");

                    b.Property<double>("Taux_Emprunt_En_Retard")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("date_stat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("id_param")
                        .HasColumnType("text");

                    b.HasKey("id_stat");

                    b.HasIndex("id_param")
                        .IsUnique();

                    b.ToTable("Statistiques", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("domain.Entity.Bibliothecaire", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("domain.Entity.Bibliothecaire", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entity.Bibliothecaire", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("domain.Entity.Bibliothecaire", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("domain.Entity.Emprunts", b =>
                {
                    b.HasOne("domain.Entity.Inventaire", "Inventaire")
                        .WithMany("Emprunts")
                        .HasForeignKey("Id_inv")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("domain.Entity.Bibliothecaire", "Bibliothecaire")
                        .WithMany("Emprunts")
                        .HasForeignKey("id_biblio")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("domain.Entity.Membre", "Membre")
                        .WithMany("Emprunts")
                        .HasForeignKey("id_emp")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Bibliothecaire");

                    b.Navigation("Inventaire");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("domain.Entity.Inventaire", b =>
                {
                    b.HasOne("domain.Entity.Livres", "Livre")
                        .WithMany("Inventaires")
                        .HasForeignKey("id_liv")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Livre");
                });

            modelBuilder.Entity("domain.Entity.Livres", b =>
                {
                    b.HasOne("domain.Entity.Bibliothecaire", "Bibliothecaire")
                        .WithMany("Livres")
                        .HasForeignKey("id_biblio")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bibliothecaire");
                });

            modelBuilder.Entity("domain.Entity.Membre", b =>
                {
                    b.HasOne("domain.Entity.Bibliothecaire", "Bibliothecaire")
                        .WithMany("Membres")
                        .HasForeignKey("id_biblio")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bibliothecaire");
                });

            modelBuilder.Entity("domain.Entity.Nouveaute", b =>
                {
                    b.HasOne("domain.Entity.Bibliothecaire", "Bibliothecaire")
                        .WithMany("Nouveautes")
                        .HasForeignKey("id_biblio")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bibliothecaire");
                });

            modelBuilder.Entity("domain.Entity.Parametre", b =>
                {
                    b.HasOne("domain.Entity.Bibliothecaire", "Bibliothecaire")
                        .WithMany("Parametres")
                        .HasForeignKey("IdBiblio")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bibliothecaire");
                });

            modelBuilder.Entity("domain.Entity.Sanction", b =>
                {
                    b.HasOne("domain.Entity.Bibliothecaire", "Bibliothecaire")
                        .WithMany("Sanctions")
                        .HasForeignKey("id_biblio")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("domain.Entity.Emprunts", "Emprunt")
                        .WithMany("Sanctions")
                        .HasForeignKey("id_emp")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("domain.Entity.Membre", "Membre")
                        .WithMany("Sanctions")
                        .HasForeignKey("id_membre")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Bibliothecaire");

                    b.Navigation("Emprunt");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("domain.Entity.Statistique", b =>
                {
                    b.HasOne("domain.Entity.Parametre", "Parametre")
                        .WithOne("Statistiques")
                        .HasForeignKey("domain.Entity.Statistique", "id_param")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Parametre");
                });

            modelBuilder.Entity("domain.Entity.Bibliothecaire", b =>
                {
                    b.Navigation("Emprunts");

                    b.Navigation("Livres");

                    b.Navigation("Membres");

                    b.Navigation("Nouveautes");

                    b.Navigation("Parametres");

                    b.Navigation("Sanctions");
                });

            modelBuilder.Entity("domain.Entity.Emprunts", b =>
                {
                    b.Navigation("Sanctions");
                });

            modelBuilder.Entity("domain.Entity.Inventaire", b =>
                {
                    b.Navigation("Emprunts");
                });

            modelBuilder.Entity("domain.Entity.Livres", b =>
                {
                    b.Navigation("Inventaires");
                });

            modelBuilder.Entity("domain.Entity.Membre", b =>
                {
                    b.Navigation("Emprunts");

                    b.Navigation("Sanctions");
                });

            modelBuilder.Entity("domain.Entity.Parametre", b =>
                {
                    b.Navigation("Statistiques");
                });
#pragma warning restore 612, 618
        }
    }
}
